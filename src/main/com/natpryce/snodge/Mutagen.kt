package com.natpryce.snodge

import java.nio.charset.Charset
import java.util.Random


/**
 * A Mutagen maps a value to a finite sequence of mutations of that value.
 *
 * Mutations are calculated lazily so that mutants only need be constructed
 * for a random sample of all possible mutations.
 */
typealias Mutagen<T> = (Random, T) -> Sequence<Lazy<T>>


/**
 * Transform a Mutagen, so that it mutates values of a different type.
 */
fun <T, U> Mutagen<U>.mapped(mapIn: (T) -> U, mapOut: (U) -> T): Mutagen<T> =
    fun(random: Random, original: T) =
        this(random, mapIn(original)).mapLazy(mapOut)

fun <T, U> Sequence<Lazy<T>>.mapLazy(f: (T) -> U) = map { lazy { f(it.value) } }

/**
 * Transform a Mutagen of strings to a mutagen of byte arrays by using the given character encoding
 */
fun Mutagen<String>.encodedAs(encoding: Charset): Mutagen<ByteArray> =
    mapped({ it.toString(encoding) }, { it.toByteArray(encoding) })


/**
 * The main entry point of the Snodge library: randomly sample a number of mutants from potential mutants
 * generated by a mutagen.
 */
fun <T> Random.mutants(mutagen: Mutagen<T>, sampleSize: Int, original: T): List<T> =
    mutagen(this, original)
        .let { sample(sampleSize, it) }
        .map { it.value }
