package com.natpryce.snodge

import kotlin.random.Random


/**
 * Returns a random sample of mutants, selected with equal probability from a population of potential mutants,
 * generated by applying a mutagen to some original values.
 */
fun <T> Random.mutants(mutagen: Mutagen<T>, sampleSize: Int, originals: Collection<T>): List<T> =
    originals.asSequence()
        .flatMap { mutagen(this, it) }
        .let { sample(sampleSize, it) }
        .map { it.value }


/**
 * Returns a random sample of mutants, selected with equal probability from a population of potential mutants,
 * generated by applying a mutagen to an original value.
 */
fun <T> Random.mutants(mutagen: Mutagen<T>, sampleSize: Int, original: T): List<T> =
    mutants(mutagen, sampleSize, listOf(original))

/**
 * Returns a single mutant.
 *
 * One use for this is to mutate a sequence of randomly generated original values, such as might be
 * generated by a property-based testing library.
 */
fun <T> Random.mutant(mutagen: Mutagen<T>, original: T): T =
    mutants(mutagen, 1, original).first()
